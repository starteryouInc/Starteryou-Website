name: Deploy to AWS EC2-DEV-SERVER

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Fetch Certificates from DB Server
      - name: Fetch Certificates from DB Server
        env:
          DB_EC2_SSH_KEY: ${{ secrets.DB_EC2_SSH_KEY }}
          DB_EC2_HOST: ${{ secrets.DB_EC2_HOST }}
          DB_EC2_USER: ${{ secrets.DB_EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          set -e
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Create db_key.pem for accessing DB server
          echo "$DB_EC2_SSH_KEY" > ~/.ssh/db_key.pem
          chmod 600 ~/.ssh/db_key.pem
          ssh-keyscan -H $DB_EC2_HOST >> ~/.ssh/known_hosts

          echo "Fetching certificates from DB server..."
          ssh -i ~/.ssh/db_key.pem $DB_EC2_USER@$DB_EC2_HOST "sudo cat /etc/ssl/mongodb/ca.crt" > ./ca.crt
          ssh -i ~/.ssh/db_key.pem $DB_EC2_USER@$DB_EC2_HOST "sudo cat /etc/ssl/mongodb/server.pem" > ./server.pem

          # Ensure db_key.pem exists before transferring
          if [ -f ~/.ssh/db_key.pem ]; then
            echo "db_key.pem exists. Transferring db_key.pem to EC2 server..."
          else
            echo "Error: db_key.pem does not exist!"
            exit 1
          fi

          # Transfer certificates to target EC2 server
          echo "$EC2_SSH_KEY" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

          scp -i ~/.ssh/ec2_key.pem ./ca.crt $EC2_USER@$EC2_HOST:/tmp/ca.crt
          scp -i ~/.ssh/ec2_key.pem ./server.pem $EC2_USER@$EC2_HOST:/tmp/server.pem
          scp -i ~/.ssh/ec2_key.pem ~/.ssh/db_key.pem $EC2_USER@$EC2_HOST:/tmp/db_key.pem

      # Step 3: Deploy Application on Target EC2 Server
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            sudo mkdir -p /etc/ssl/mongodb
            sudo mv /tmp/ca.crt /etc/ssl/mongodb/ca.crt
            sudo mv /tmp/server.pem /etc/ssl/mongodb/server.pem
            sudo mv /tmp/db_key.pem /etc/ssl/mongodb/db_key.pem
            sudo chmod 600 /etc/ssl/mongodb/*

            PROJECT_ROOT="/home/ec2-user/Starteryou-Website"
            REPO_DIR="${PROJECT_ROOT}/Starteryou"
            ENV_FILE="${REPO_DIR}/.env.server"

            mkdir -p "$PROJECT_ROOT"
            cd "$PROJECT_ROOT"

            if [ ! -d "$REPO_DIR" ]; then
              git clone https://github.com/starteryouInc/Starteryou-Website.git -b develop Starteryou
            else
              cd "$REPO_DIR"
              git fetch origin develop
              git reset --hard origin/develop
            fi
  
            echo "Generating .env.server file..."
            cat > "$ENV_FILE" << EOF
            NODE_ENV=production
            PORT=3000
            FRONTEND_URL=http://dev.starteryou.com:8080
            VITE_BACKEND_URL=http://dev.starteryou.com:3000
            MONGO_USER=${{ secrets.MONGO_USER }}
            MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
            MONGO_HOST=${{ secrets.MONGO_HOST }}
            MONGO_PORT=${{ secrets.MONGO_PORT }}
            MONGO_DB=${{ secrets.MONGO_DB }}
            MONGO_AUTH_SOURCE=${{ secrets.MONGO_AUTH_SOURCE }}
            MONGO_TLS=${{ secrets.MONGO_TLS }}
            MONGO_TLS_CA=${{ secrets.MONGO_TLS_CA }}
            MONGO_TLS_CERT=${{ secrets.MONGO_TLS_CERT }}
            MONGO_TLS_CA_PATH=${{ secrets.MONGO_TLS_CA_PATH }}
            MONGO_TLS_CERT_PATH=${{ secrets.MONGO_TLS_CERT_PATH }}
            MONGO_APP_NAME=${{ secrets.MONGO_APP_NAME }}
            DB_EC2_HOST=${{ secrets.DB_EC2_HOST }}
            DB_EC2_USER=${{ secrets.DB_EC2_USER }}
            DEV_JWT_SECRET=${{ secrets.DEV_JWT_SECRET }}
            EOF


            # Source the .env.server file to make variables available to the session
            set -a
            source "$ENV_FILE"
            set +a
            chmod 600 "$ENV_FILE"

            echo "Deploying Docker services..."
            docker-compose --profile server --env-file "$ENV_FILE" down --volumes --remove-orphans
            docker-compose --profile server --env-file "$ENV_FILE" up --build -d
