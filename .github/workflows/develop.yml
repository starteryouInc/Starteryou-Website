name: Deploy to AWS EC2-DEV-SERVER

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Fetch Certificates from DB Server
      - name: Fetch Certificates from DB Server
        env:
          DB_EC2_SSH_KEY: ${{ secrets.DB_EC2_SSH_KEY }}
          DB_EC2_HOST: ${{ secrets.DB_EC2_HOST }}
          DB_EC2_USER: ${{ secrets.DB_EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          set -e
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          # Create db_key.pem for accessing DB server
          echo "$DB_EC2_SSH_KEY" > ~/.ssh/db_key.pem
          chmod 600 ~/.ssh/db_key.pem
          ssh-keyscan -H $DB_EC2_HOST >> ~/.ssh/known_hosts
          echo "Fetching certificates from DB server..."
          ssh -i ~/.ssh/db_key.pem $DB_EC2_USER@$DB_EC2_HOST "sudo cat /etc/ssl/mongodb/ca.crt" > ./ca.crt
          ssh -i ~/.ssh/db_key.pem $DB_EC2_USER@$DB_EC2_HOST "sudo cat /etc/ssl/mongodb/server.pem" > ./server.pem
          # Ensure db_key.pem exists before transferring
          if [ -f ~/.ssh/db_key.pem ]; then
            echo "db_key.pem exists. Transferring db_key.pem to EC2 server..."
          else
            echo "Error: db_key.pem does not exist!"
            exit 1
          fi
          # Transfer db_key.pem to the target EC2 server
          echo "$EC2_SSH_KEY" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
          scp -i ~/.ssh/ec2_key.pem ~/.ssh/db_key.pem $EC2_USER@$EC2_HOST:/tmp/db_key.pem
      # Step 3: Transfer Certificates to Target EC2 Server
      - name: Transfer Certificates to Target EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          set -e
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
          echo "$EC2_SSH_KEY" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          echo "Transferring certificates to EC2 server..."
          scp -i ~/.ssh/ec2_key.pem ./ca.crt $EC2_USER@$EC2_HOST:/tmp/ca.crt
          scp -i ~/.ssh/ec2_key.pem ./server.pem $EC2_USER@$EC2_HOST:/tmp/server.pem
      # Step 4: Deploy Application on Target EC2 Server
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            sudo mkdir -p /etc/ssl/mongodb
            sudo mv /tmp/ca.crt /etc/ssl/mongodb/ca.crt
            sudo mv /tmp/server.pem /etc/ssl/mongodb/server.pem
            sudo mv /tmp/db_key.pem /etc/ssl/mongodb/db_key.pem
            sudo chmod 600 /etc/ssl/mongodb/*
            PROJECT_ROOT="/home/ec2-user/Starteryou-Website"
            REPO_DIR="${PROJECT_ROOT}/Starteryou"
            ENV_FILE="${REPO_DIR}/.env.server"
            mkdir -p "$PROJECT_ROOT"
            cd "$PROJECT_ROOT"
            if [ ! -d "$REPO_DIR" ]; then
              git clone https://github.com/starteryouInc/Starteryou-Website.git -b develop Starteryou
            else
              cd "$REPO_DIR"
              git fetch origin develop
              git reset --hard origin/develop
            fi
            echo "Generating .env.server file..."
            cat > "$ENV_FILE" << EOF
            NODE_ENV=production
            PORT=3000
            FRONTEND_URL=http://dev.starteryou.com:8080
            VITE_BACKEND_URL=http://dev.starteryou.com:3000
            MONGO_USER=$(echo "${{ secrets.MONGO_USER }}" | tr -d '\n')
            MONGO_PASSWORD=$(echo "${{ secrets.MONGO_PASSWORD }}" | tr -d '\n')
            MONGO_HOST=$(echo "${{ secrets.MONGO_HOST }}" | tr -d '\n')
            MONGO_PORT=$(echo "${{ secrets.MONGO_PORT }}" | tr -d '\n')
            MONGO_DB=$(echo "${{ secrets.MONGO_DB }}" | tr -d '\n')
            MONGO_AUTH_SOURCE=$(echo "${{ secrets.MONGO_AUTH_SOURCE }}" | tr -d '\n')
            MONGO_TLS=$(echo "${{ secrets.MONGO_TLS }}" | tr -d '\n')
            MONGO_TLS_CA=$(echo "${{ secrets.MONGO_TLS_CA }}" | tr -d '\n')
            MONGO_TLS_CERT=$(echo "${{ secrets.MONGO_TLS_CERT }}" | tr -d '\n')
            MONGO_TLS_CA_PATH=$(echo "${{ secrets.MONGO_TLS_CA_PATH }}" | tr -d '\n')
            MONGO_TLS_CERT_PATH=$(echo "${{ secrets.MONGO_TLS_CERT_PATH }}" | tr -d '\n')
            MONGO_APP_NAME=$(echo "${{ secrets.MONGO_APP_NAME }}" | tr -d '\n')
            EOF
            
            echo ".env.server file generated successfully."
            echo "Deploying Docker services..."
            docker-compose --profile server --env-file "$ENV_FILE" down --volumes --remove-orphans
            docker-compose --profile server --env-file "$ENV_FILE" up --build -d
