services:
  sshtunnel:
    image: alpine:latest
    container_name: sshtunnel
    entrypoint: >
      sh -c "
      apk add --no-cache openssh &&
      ssh-keyscan -H ${DB_EC2_HOST} >> /etc/ssh/ssh_known_hosts &&
      ssh -o ExitOnForwardFailure=yes -N -L 27017:localhost:27017 ${DB_EC2_USER}@${DB_EC2_HOST} -i /root/db_key.pem
      "
    environment:
      DB_EC2_HOST: ${DB_EC2_HOST}
      DB_EC2_USER: ${DB_EC2_USER}
    volumes:
      - ./db_key.pem:/root/db_key.pem:ro
    restart: always
    healthcheck:
      test: ["CMD", "pgrep", "ssh"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: starteryou-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 3000
      FRONTEND_URL: http://dev.starteryou.com:8080
      VITE_BACKEND_URL: http://dev.starteryou.com:3000
      MONGO_TLS: "true"
      MONGO_HOST: localhost
      MONGO_PORT: 27017
      MONGO_TLS_CA: /certificates/ca.crt
      MONGO_TLS_CERT: /certificates/server.pem
    volumes:
      - /etc/ssl/mongodb/ca.crt:/certificates/ca.crt:ro
      - /etc/ssl/mongodb/server.pem:/certificates/server.pem:ro
      - ./backend:/usr/src/app
      - ./backend/uploads:/usr/src/app/uploads
    ports:
      - "3000:3000"
    networks:
      - backend-network
    depends_on:
      sshtunnel:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: starteryou-frontend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      BACKEND_URL: http://dev.starteryou.com:3000
    depends_on:
      - backend
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge
