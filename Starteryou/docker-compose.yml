services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: starteryou-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 3000
      FRONTEND_URL: http://dev.starteryou.com:8080
      VITE_BACKEND_URL: http://dev.starteryou.com:3000
      MONGO_TLS: "true"
      MONGO_HOST: db.starteryou.com
      MONGO_PORT: 27017
      MONGO_TLS_CA: /certificates/ca.crt
      MONGO_TLS_CERT: /certificates/server.pem
    volumes:
      - C:/Users/MD ASIF SIDDIQUI/Desktop/Asif/ca.crt:/certificates/ca.crt:ro
      - C:/Users/MD ASIF SIDDIQUI/Desktop/Asif/server.pem:/certificates/server.pem:ro
      - ./backend:/usr/src/app
      - ./backend/uploads:/usr/src/app/uploads
    ports:
      - "3000:3000"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: starteryou-frontend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      BACKEND_URL: http://dev.starteryou.com:3000
    depends_on:
      - backend
    networks:
      - backend-network

  test:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: starteryou-tests
    depends_on:
      - backend
    environment:
      NODE_ENV: test
      MONGO_TLS: "true"
      MONGO_HOST: db.starteryou.com # Public IP of your MongoDB server
      MONGO_PORT: 27017
      MONGO_TLS_CA: /certificates/ca.crt
      MONGO_TLS_CERT: /certificates/server.pem
    volumes:
      - C:/Users/MD ASIF SIDDIQUI/Desktop/Asif/ca.crt:/certificates/ca.crt:ro
      - C:/Users/MD ASIF SIDDIQUI/Desktop/Asif/server.pem:/certificates/server.pem:ro
      - ./backend:/usr/src/app
    networks:
      - backend-network
    command: npm test

networks:
  backend-network:
    driver: bridge
